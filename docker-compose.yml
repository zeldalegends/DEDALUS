services:

  # Orion Context Broker (v2 and LD)
  orion-ld:
    image: fiware/orion-ld:1.5.1
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    restart: on-failure
    expose:
      - "1026"
    command: -dbhost mongo-db -db orionld -logLevel DEBUG -forwarding
    healthcheck:
      test: curl --fail --silent http://orion:1026/version || exit 1

  # Mongo DB for Orion LD
  mongo-db:
    image: mongo:4.4 #:5 #:5.0.25
    hostname: mongo
    container_name: db-mongo
    restart: on-failure
    expose:
      - "27017"
    command: --nojournal
    volumes:
      - mongo-config:/data/configdb
      - mongo-db:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: mongo --quiet --eval 'db.runCommand("ping")' || exit 1

  # Mongo DB front-end
  mongo-express:
    image: mongo-express #:1.0.2
    hostname: mongo-express
    container_name: fe-mongo
    depends_on:
      - mongo-db
    restart: on-failure
    expose:
      - "8081"
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=
      - ME_CONFIG_BASICAUTH_PASSWORD=
      - ME_CONFIG_MONGODB_SERVER=mongo-db
    healthcheck:
      test: wget --quiet --spider http://admin:pass@localhost:8081 || exit 1

  # docker run -it --rm --net=fiware_default --name fe-mongo -e ME_CONFIG_MONGODB_SERVER=mongo-db mongo-express
  # docker run -it --rm --net=fiware_default --name ngrok-mongo -e NGROK_AUTHTOKEN=2L2kdrNlcTBcxDERiOxTW3kyEaV_3siN3rWauYmt4KLGHrHZg ngrok/ngrok:latest http fe-mongo:8081

  # Keyrock IdM
  keyrock-idm:
    image: fiware/idm #:8.4.0
    hostname: keyrock
    container_name: fiware-keyrock
    depends_on:
      - mysql-db
    restart: on-failure
    ports:
      - "3005:3005"
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS=secret
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:3005
      - IDM_PORT=3005
      - IDM_HTTPS_ENABLED=false
      - IDM_HTTPS_PORT=3443
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
      - IDM_CSP_FORM_ACTION=*

  # MySQL DB for Keyrock IdM
  mysql-db:
    image: mysql #:8.3.0
    hostname: mysql
    container_name: db-mysql
    restart: on-failure
    expose:
      - "3306"
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-db:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: mysqladmin ping -h localhost -uroot -psecret || exit 1

  # docker exec db-mysql /usr/bin/mysqldump --databases -u root --password=secret idm > backup.sql
  # cat backup.sql | docker exec -i db-mysql /usr/bin/mysql -u root --password=secret idm

  # MySQL DB front-end
  phpmyadmin:
    image: phpmyadmin #:5.2.1
    hostname: phpmyadmin
    container_name: fe-mysql
    depends_on:
      - mysql-db
    restart: on-failure
    expose:
      - "80"
    environment:
      - PMA_HOST=mysql-db
      - PMA_USER=root
      - PMA_PASSWORD=secret
    healthcheck:
      test: curl --fail --silent http://localhost || exit 1

  # docker run -it --rm --network fiware_default --name fe-mysql phpmyadmin
  # docker run -it --rm --network fiware_default --name ngrok-mysql -e NGROK_AUTHTOKEN=2L2kdrNlcTBcxDERiOxTW3kyEaV_3siN3rWauYmt4KLGHrHZg ngrok/ngrok:latest http fe-mysql

  # NGINX Reverse Proxy and Web Server for NGSI-LD @context files
  nginx:
    image: nginx #:1.25.4
    hostname: web-server
    container_name: fiware-nginx
    depends_on:
      - node-red
    restart: on-failure
    networks:
      default:
        aliases:
          - context
          - ld-context
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl/:/etc/ssl/
    # - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./public:/home/www/public_html/localhost/public/
    healthcheck:
    # test: curl --fail http://localhost
      test: (wget --server-response --spider --quiet http://ld-context/public/data-models/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1


  # Wilma PEP Proxy for Orion-LD
  orion-proxy:
    image: fiware/pep-proxy #:8.4.0
    hostname: wilma
    container_name: fiware-orion-proxy
    depends_on:
     - keyrock-idm
     - orion-ld
    restart: on-failure
    ports:
      - "1026:1027"
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-ld
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1027
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version


  # Node-RED Custom IoT Agent + Open API (Swagger)
  node-red:
    # image: hybuild/swagger:latest
    image: nodered/node-red:latest-18 #:3.1.7
    # build: ./node-red
    hostname: ${HOSTNAME:-iot-agent}
    container_name: fiware-iot-agent
    depends_on:
     - keyrock-idm
     - orion-proxy
    restart: on-failure
    ports:
    # - "4041:8080"
      - "4041:1880"
    environment:
      - TZ=Europe/Amsterdam
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./node-red/data:/data
      - ./public:/public
    # - node-red-data:/data
    # - node-red-public:/usr/src/node-red/public
    # - swagger-data:/data
    # - swagger-public:/usr/src/node-red/public


volumes:
  mongo-config: ~
  mongo-db: ~
  mysql-db: ~
  # node-red-data:
  # node-red-public:
  # swagger-data: null
  # swagger-public: null
