events { }

http {

  # include /etc/nginx/mime.types;

  server {
    listen 80;
    listen [::]:80;
    server_name hyperride.duckdns.org;
    # charset utf-8;

    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    listen [::]:443;
    server_name hyperride.duckdns.org;
    # charset utf-8;

    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    # ssl_certificate     /root/ssl/cert.pem;
    # ssl_certificate_key  /root/ssl/key.pem;

    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    # ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256";
    # ssl_verify_depth 3;

    # access_log /var/log/nginx/nginx.vhost.access.log;
    # error_log /var/log/nginx/nginx.vhost.error.log;

    #=================#
    # Reverse proxies #
    #=================#

    location /v3 {

      # Enable CORS
      if ($request_method = 'OPTIONS') {
	add_header 'Access-Control-Allow-Origin' '*';
	add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
	#
	# Custom headers and headers various browsers *should* be OK with but aren't
	#
	add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
	#
	# Tell client that this pre-flight info is valid for 20 days
	#
	add_header 'Access-Control-Max-Age' 1728000;
	add_header 'Content-Type' 'text/plain; charset=utf-8';
	add_header 'Content-Length' 0;
	return 204;
      }
      if ($request_method = 'POST') {
	add_header 'Access-Control-Allow-Origin' '*';
	add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
	add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
	add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
      }
      if ($request_method = 'GET') {
	add_header 'Access-Control-Allow-Origin' '*';
	add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
	add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
	add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
      }
      if ($request_method = 'PUT') {
	add_header 'Access-Control-Allow-Origin' '*';
	add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
	add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
	add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
      }
      if ($request_method = 'DELETE') {
	add_header 'Access-Control-Allow-Origin' '*';
	add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
	add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
	add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
      }

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      # proxy_set_header Host $http_host;
      # proxy_set_header X-Real-IP $remote_addr;
      # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # proxy_set_header X-Forwarded-Proto $scheme;
      proxy_pass http://node-red:1880/v3;

      proxy_buffering off;
    }

    # Let's Encrypt
    location ~ /.well-known/acme-challenge {
      allow all;
      root /var/www/certbot;
    }

#    # location ~ ^/(editor|ui)/ {
#    location / {
#      proxy_pass http://172.17.0.1:4041/;
#
#      proxy_http_version 1.1;
#      proxy_set_header Upgrade $http_upgrade;
#      proxy_set_header Connection "upgrade";
#
#      proxy_set_header Host $host;
#      proxy_set_header X-Real-IP $remote_addr;
#      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#      proxy_set_header X-Forwarded-Proto $scheme;
#
#      #proxy_hide_header Access-Control-Allow-Origin;
#      #add_header Access-Control-Allow-Origin $http_origin;
#      
#      #proxy_buffers 4 256k;
#      #proxy_buffer_size 128k;
#      #proxy_busy_buffers_size 256k;
#    }

    # Keyrock
    location /keyrock/ {
      proxy_set_header    X-Forwarded-Host   $host;
      proxy_set_header    Host               $host;
      proxy_set_header    X-Real-IP          $remote_addr;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
      rewrite ^/keyrock(/.*)$  $1 break;

      proxy_pass http://keyrock:3005;
      proxy_redirect / /keyrock/;
      sub_filter '="/' '="/keyrock/';
      sub_filter '= "/' '= "/keyrock/';
      sub_filter '=\'/' '=\'/keyrock/';

      sub_filter_once off;
    }

    location /idm/ {
      proxy_pass http://keyrock:3005;
    }

    location /img/ {
      proxy_pass http://keyrock:3005;
    }

    # Orion
    location /orion/ {
      proxy_pass http://orion-proxy:1027/;
    }

    location /orion-no-proxy/ {
      proxy_pass http://orion:1026/;
    }

    # ZeroSSL
    location /validation {
      proxy_pass http://$host//.well-known/pki-validation/;
    }

    #=============#
    # Web servers #
    #=============#

  # # Nginx web server (/home/www/public_html/localhost/public/uploads)
  # location /uploads
  #   root /home/www/public_html/localhost/public;
  #   autoindex on;
  # }

    # Nginx web server (/home/www/public_html/localhost/public)
    location /public {
      root /home/www/public_html/localhost;
      autoindex on;
    }

    #===========#
    # Redirects #
    #===========#

    location / {
  #     return 301 https://$host/public/home;
        return 301 /public/home;
    }

  # error_page 500 502 503 504 /5xx.html;
  # location /5xx.html {
  #   root /www/error_pages/;
  # }
  }
}
