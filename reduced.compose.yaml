# version: "3.9"
services:
  # Orion-LD Context Broker
  orion-ld:
    image: fiware/orion-ld #:1.1.2
    container_name: orion-ld
    depends_on:
      mongo-db:
        condition: service_healthy
  # restart: on-failure
  # expose:
  #   - "1026"       # orion-ld:1026
    ports:
      - "1026:1026"  # localhost:1026 (for testing)
    command: -dbhost mongo-db -db orionld -logLevel DEBUG
    healthcheck:
      test: curl -sf http://localhost:1026/ngsi-ld/ex/v1/version || exit 1

  # Keyrock IdM
  keyrock:
    image: fiware/idm #:8.3.2-distroless
    container_name: keyrock
    depends_on:
      mysql-db:
        condition: service_healthy
  # restart: on-failure
  # expose:
  #   - "3005"      # keyrock:3005
    ports:
      - "3005:3005" # localhost:3005
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS=secret
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:3005
      - IDM_PORT=3005
      - IDM_HTTPS_ENABLED=false
      - IDM_HTTPS_PORT=3443
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
      - IDM_CSP_FORM_ACTION=*

  # Wilma PEP Proxy for Orion-LD
  pep-proxy:
    image: fiware/pep-proxy #:8.3.0-distroless
    container_name: pep-proxy
    depends_on:
      keyrock:
        condition: service_started
    restart: on-failure
  # expose:
  #   - "1027"      # orion-proxy-ld:1027
    ports:
      - "1027:1027" # localhost:1027
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-ld
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1027
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version

  # Apache Server for NGSI-LD @context files
  web:
    image: httpd:alpine
    container_name: apache-server
    restart: on-failure
    networks:
      default:
        aliases:
          - ld-context
  # expose:
  #   - "80"    # http://ld-context
    ports:
      - "80:80" # http://localhost
    volumes:
      - ./public:/usr/local/apache2/htdocs/
    healthcheck:
      test: wget --spider -q http://localhost || exit 1


  # Databases

  # Mongo DB (Orion)
  mongo-db:
    image: mongo:5 # 5.0.14
    container_name: db-mongo
    restart: on-failure
    expose:
      - "27017"       # mongo-db:27017
  # ports:
  #   - "27017:27017" # localhost:27017
    command: --nojournal
    volumes:
      - mongo-db:/data/db
      - mongo-db-config:/data/configdb
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh localhost:27017/test --quiet

  # Mongo Express + Ngrok (https://ngrok.com/docs/using-ngrok-with/docker/)
  # docker run -it --rm --net=fiware_default --name fe-mongo -e ME_CONFIG_MONGODB_SERVER=mongo-db mongo-express
  # docker run -it --rm --net=fiware_default --name ngrok-mongo -e NGROK_AUTHTOKEN=2L2kdrNlcTBcxDERiOxTW3kyEaV_3siN3rWauYmt4KLGHrHZg ngrok/ngrok:latest http fe-mongo:8081

  # MySQL DB (Keyrock)
  mysql-db:
    image: mysql #:8.0.32
    container_name: db-mysql
    restart: on-failure
    expose:
      - "3306"      # mysql-db:3306
  # ports:
  #   - "3306:3306" # localhost:3306
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-db:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: mysqladmin ping -h localhost -uroot -psecret && exit 0

  # MySQL Backup and restore
  # docker exec db-mysql /usr/bin/mysqldump --databases -u root --password=secret idm > backup.sql
  # cat backup.sql | docker exec -i db-mysql /usr/bin/mysql -u root --password=secret idm

  # phpMyAdmin + Ngrok (https://ngrok.com/docs/using-ngrok-with/docker/)
  # docker run -it --rm --network fiware_default --name fe-mysql phpmyadmin
  # docker run -it --rm --network fiware_default --name ngrok-mysql -e NGROK_AUTHTOKEN=2L2kdrNlcTBcxDERiOxTW3kyEaV_3siN3rWauYmt4KLGHrHZg ngrok/ngrok:latest http fe-mysql:8080


  # Other services

  # Node-RED for flow-programming automation
  node-red:
  # build: ./node-red
    image: nodered/node-red:latest-18-minimal #hybuild/swagger
    container_name: node-red
    depends_on:
      keyrock:
        condition: service_healthy
      pep-proxy:
        condition: service_healthy
    restart: on-failure
  # expose:
  #   - "1880"      # node-red:1880
    ports:
      - "1880:1880" # localhost1880
    environment:
      - TZ=Europe/Amsterdam
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./node-red/data:/data
      - ./public:/public
  #   - node-red-public:/usr/src/node-red/public
  #   - node-red-data:/data

  # Run once to update dependencies and custom nodes
  # docker exec -it node-red bash -c "cd /data && npm install --unsafe-perm --no-update-notifier --no-fund --only=production" && docker restart node-red


# Volumes
volumes:
  mysql-db: ~
  mongo-db: ~
  mongo-db-config: ~
# node-red-data: ~
# node-red-public: ~
